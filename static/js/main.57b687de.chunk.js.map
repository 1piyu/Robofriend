{"version":3,"sources":["Component/Card/card.js","Component/CardList/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","users","map","user","key","App","state","searchfeild","fetch","then","response","json","data","setState","console","log","this","filteredRobot","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAeeA,G,YAZJ,SAACC,GAEZ,OAEE,yBAAKC,UAAU,YACf,yBAAKC,IAAG,sCAAiCF,EAAMG,IAAMC,IAAI,SAC3D,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCMKC,EAZA,SAAC,GAAW,IAAVC,EAAS,EAATA,MAEjB,OAEA,yBAAKP,UAAU,QAEbO,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAIA,GAAIO,EAAKP,GAAIE,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,aCiCnEM,G,kBAnCb,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTL,MAAM,GACNM,YAAY,IAJH,E,iFAQO,IAAD,OACjBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAG,EAAKC,SAAS,CAACZ,MAAMW,MAAOE,QAAQC,IAAIC,KAAKV,MAAML,U,+BAK1D,IAAD,OAEVa,QAAQC,IAAIC,KAAKV,MAAML,OAIvB,IAAMgB,EAAcD,KAAKV,MAAML,MAAMiB,QAAO,SAAAX,GAAW,OAAIA,EAAYT,KAAKqB,cAAcC,SAAS,EAAKd,MAAMC,gBAE1G,OACI,yBAAKb,UAAU,OACb,2CACA,2BAAO2B,KAAK,OAAQC,YAAY,gBAAiBC,SAAU,SAACC,GAAD,OAAK,EAAKX,SAAS,CAACN,YAAYiB,EAAEC,OAAOC,WAEpG,kBAAC,EAAD,CAAUzB,MAAOgB,S,GA/BTU,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.57b687de.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card=(props)=>{\r\n\r\nreturn(\r\n\t\r\n\t\t<div className='robocard'>\r\n\t\t<img src={`https://robohash.org/kkk/id/${props.id}`} alt=\"robo\"/>\r\n<h2>{props.name}</h2>\r\n<p>{props.email}</p>\r\n</div>\r\n\r\n);\r\n}\r\nexport default Card;","import React from 'react'\r\nimport'./CardList.css';\r\nimport Card from'../Card/card';\r\n\r\nconst CardList=({users})=>{\r\n\r\nreturn(\r\n\r\n<div className=\"list\">\r\n\r\n\t{users.map(user => <Card key={user.id} id={user.id} name={user.name} email={user.email}/>)}\r\n\t</div>\r\n\r\n\t);\r\n\r\n}\r\nexport default CardList;","import React from 'react';\nimport CardList from './Component/CardList/CardList';\nimport './App.css';\n//import {CardList} from './Component/CardList/CardList.js'\n\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    this.state={\n      users:[],\n      searchfeild:''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response=>response.json())\n     .then(data=> this.setState({users:data}),console.log(this.state.users));\n  }\n\n\n\n  render(){\n\nconsole.log(this.state.users)\n\n\n\nconst filteredRobot=this.state.users.filter(searchfeild => searchfeild.name.toLowerCase().includes(this.state.searchfeild));\n\n    return(\n        <div className=\"App\">\n          <h1>Robofriends</h1>\n          <input type=\"text\"  placeholder=\"search robots\"  onChange={(e)=>this.setState({searchfeild:e.target.value})}/>\n    \n          <CardList users={filteredRobot}/>\n        </div>\n      );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}